# Retrieved from https://www.airtable.com/universe/expHF9XTWWwAT299z
# and then edited by hand for consistency and correctness.

ABS(value)  # Returns the absolute value.
AND(expression, [expressions...])  # Returns true if all the arguments are true, returns false otherwise.
AVERAGE(number, [numbers...])  # Returns the average of the numbers.
BLANK()  # Returns a blank value.
CEILING(value, [significance])  # Returns the nearest integer multiple of significance that is greater than or equal to the value. If no significance is provided, a significance of 1 is assumed.
CONCATENATE(text, [texts...])  # Joins together the text arguments into a single text value.
COUNT(number, [numbers...])  # Count the number of numeric items.
COUNTA(value, [values...])  # Count the number of non-empty values. This function counts both numeric and text values.
COUNTALL(value, [values...])  # Count the number of all elements including text and blanks.
CREATED_TIME()  # Returns the date and time a given record was created.
DATEADD(date, number, units)  # Adds specified "count" units to a datetime. (See `list of shared unit specifiers <https://support.airtable.com/hc/en-us/articles/226061308>`__. For this function we recommend using the full unit specifier for your desired unit.)
DATESTR(date)  # Formats a datetime into a string (YYYY-MM-DD).
DATETIME_DIFF(date1, date2, units)  # Returns the difference between datetimes in specified units. The difference between datetimes is determined by subtracting [date2] from [date1]. This means that if [date2] is later than [date1], the resulting value will be negative.
DATETIME_FORMAT(date, [output_format])  # Formats a datetime into a specified string. See an `explanation of how to use this function with date fields <https://support.airtable.com/hc/en-us/articles/215646218>`__ or a list of `supported format specifiers <https://support.airtable.com/hc/en-us/articles/216141218>`__.
DATETIME_PARSE(date, [input_format], [locale])  # Interprets a text string as a structured date, with optional input format and locale parameters. The output format will always be formatted 'M/D/YYYY h:mm a'.
DAY(date)  # Returns the day of the month of a datetime in the form of a number between 1-31.
ENCODE_URL_COMPONENT(component_string)  # Replaces certain characters with encoded equivalents for use in constructing URLs or URIs. Does not encode the following characters: ``-_.~``
ERROR()  # Returns a generic Error value (``#ERROR!``).
EVEN(value)  # Returns the smallest even integer that is greater than or equal to the specified value.
EXP(power)  # Computes **Euler's number** (e) to the specified power.
FALSE()  # Logical value false. False is represented numerically by a 0.
FIND(stringToFind, whereToSearch, [startFromPosition])  # Finds an occurrence of stringToFind in whereToSearch string starting from an optional startFromPosition.(startFromPosition is 0 by default.) If no occurrence of stringToFind is found, the result will be 0.
FLOOR(value, [significance])  # Returns the nearest integer multiple of significance that is less than or equal to the value. If no significance is provided, a significance of 1 is assumed.
FROMNOW(date)  # Calculates the number of days between the current date and another date.
HOUR(datetime)  # Returns the hour of a datetime as a number between 0 (12:00am) and 23 (11:00pm).
IF(expression, if_true, if_false)  # Returns value1 if the logical argument is true, otherwise it returns value2. Can also be used to make `nested IF statements <https://support.airtable.com/hc/en-us/articles/221564887-Nested-IF-formulas>`__.
INT(value)  # Returns the greatest integer that is less than or equal to the specified value.
ISERROR(expr)  # Returns true if the expression causes an error.
IS_AFTER(date1, date2)  # Determines if [date1] is later than [date2]. Returns 1 if yes, 0 if no.
IS_BEFORE(date1, date2)  # Determines if [date1] is earlier than [date2]. Returns 1 if yes, 0 if no.
IS_SAME(date1, date2, unit)  # Compares two dates up to a unit and determines whether they are identical. Returns 1 if yes, 0 if no.
LAST_MODIFIED_TIME([fields...])  # Returns the date and time of the most recent modification made by a user in a non-computed field in the table.
LEFT(string, howMany)  # Extract how many characters from the beginning of the string.
LEN(string)  # Returns the length of a string.
LOG(number, [base])  # Computes the logarithm of the value in provided base. The base defaults to 10 if not specified.
LOWER(string)  # Makes a string lowercase.
MAX(number, [numbers...])  # Returns the largest of the given numbers.
MID(string, whereToStart, count)  # Extract a substring of count characters starting at whereToStart.
MIN(number, [numbers...])  # Returns the smallest of the given numbers.
MINUTE(datetime)  # Returns the minute of a datetime as an integer between 0 and 59.
MOD(value, divisor)  # Returns the remainder after dividing the first argument by the second.
MONTH(date)  # Returns the month of a datetime as a number between 1 (January) and 12 (December).
NOT(expression)  # Reverses the logical value of its argument.
NOW()  # While similar to the TODAY() function, NOW() returns the current date AND time.
ODD(value)  # Rounds positive value up the the nearest odd number and negative value down to the nearest odd number.
OR(expression, [expressions...])  # Returns true if any one of the arguments is true.
POWER(base, power)  # Computes the specified base to the specified power.
RECORD_ID()  # Returns the ID of the current record.
REGEX_EXTRACT(string, regex)  # Returns the first substring that matches a regular expression.
REGEX_MATCH(string, regex)  # Returns whether the input text matches a regular expression.
REGEX_REPLACE(string, regex, replacement)  # Substitutes all matching substrings with a replacement string value.
REPLACE(string, start_character, number_of_characters, replacement)  # Replaces the number of characters beginning with the start character with the replacement text.
REPT(string, number)  # Repeats string by the specified number of times.
RIGHT(string, howMany)  # Extract howMany characters from the end of the string.
ROUND(value, precision)  # Rounds the value to the number of decimal places given by "precision." (Specifically, ROUND will round to the nearest integer at the specified precision, with ties broken by `rounding half up toward positive infinity <https://en.wikipedia.org/wiki/Rounding#Round_half_up>`__.)
ROUNDDOWN(value, precision)  # Rounds the value to the number of decimal places given by "precision," always `rounding down <https://en.wikipedia.org/wiki/Rounding#Rounding_to_integer>`__.
ROUNDUP(value, precision)  # Rounds the value to the number of decimal places given by "precision," always `rounding up <https://en.wikipedia.org/wiki/Rounding#Rounding_to_integer>`__.
SEARCH(stringToFind, whereToSearch, [startFromPosition])  # Searches for an occurrence of stringToFind in whereToSearch string starting from an optional startFromPosition. (startFromPosition is 0 by default.) If no occurrence of stringToFind is found, the result will be empty.
SECOND(datetime)  # Returns the second of a datetime as an integer between 0 and 59.
SET_LOCALE(date, locale_modifier)  # Sets a specific locale for a datetime. **Must be used in conjunction with DATETIME_FORMAT.** A list of supported locale modifiers can be found `here <https://support.airtable.com/hc/en-us/articles/220340268>`__.
SET_TIMEZONE(date, tz_identifier)  # Sets a specific timezone for a datetime. **Must be used in conjunction with DATETIME_FORMAT.** A list of supported timezone identifiers can be found `here <https://support.airtable.com/hc/en-us/articles/216141558-Supported-timezones-for-SET-TIMEZONE>`__.
SQRT(value)  # Returns the square root of a nonnegative number.
SUBSTITUTE(string, old_text, new_text, [index])  # Replaces occurrences of old_text in string with new_text.
SUM(number, [numbers...])  # Sum together the numbers. Equivalent to number1 + number2 + ...
SWITCH(expression, pattern, result, [pattern_results...])  # Takes an expression, a list of possible values for that expression, and for each one, a value that the expression should take in that case. It can also take a default value if the expression input doesn't match any of the defined patterns. In many cases, SWITCH() can be used instead `of a nested IF() formula <https://support.airtable.com/hc/en-us/articles/360041812413>`__.
T(value)  # Returns the argument if it is text and blank otherwise.
TIMESTR(timestamp)  # Formats a datetime into a time-only string (HH:mm:ss).
TODAY()  # While similar to the NOW() function: TODAY() returns the current date (not the current time, if formatted, time will return 12:00am).
TONOW(date)  # Calculates the number of days between the current date and another date.
TRIM(string)  # Removes whitespace at the beginning and end of string.
TRUE()  # Logical value true. The value of true is represented numerically by a 1.
UPPER(string)  # Makes string uppercase.
VALUE(text)  # Converts the text string to a number. Some exceptions applyâ€”if the string contains certain mathematical operators(-,%) the result may not return as expected. In these scenarios we recommend using a combination of VALUE and REGEX_REPLACE to remove non-digit values from the string:
WEEKDAY(date, [startDayOfWeek])  # Returns the day of the week as an integer between 0 (Sunday) and 6 (Saturday). You may optionally provide a second argument (either ``"Sunday"`` or ``"Monday"``) to start weeks on that day. If omitted, weeks start on Sunday by default.
WEEKNUM(date, [startDayOfWeek])  # Returns the week number in a year. You may optionally provide a second argument (either ``"Sunday"`` or ``"Monday"``) to start weeks on that day. If omitted, weeks start on Sunday by default.
WORKDAY(startDate, numDays, [holidays])  # Returns a date that is numDays working days after startDate. Working days exclude weekends and an optional list of holidays, formatted as a comma-separated string of ISO-formatted dates.
WORKDAY_DIFF(startDate, endDate, [holidays])  # Counts the number of working days between startDate and endDate. Working days exclude weekends and an optional list of holidays, formatted as a comma-separated string of ISO-formatted dates.
XOR(expression, [expressions...])  # Returns true if an **odd** number of arguments are true.
YEAR(date)  # Returns the four-digit year of a datetime.
